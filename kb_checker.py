import requests,csv,argparse,re

class MSRC_CHECKER:
    def __init__(self, csv_file=False):
        self.msrc_endpoint = 'http://api.msrc.microsoft.com'
        self.tenable_endpoint = 'http://www.tenable.com'
        self.csv_file = csv_file

        if self.csv_file:
            with open(self.csv_file, 'a') as f:
                writer = csv.writer(f)
                header = ['KB', 'CVE Title', 'CVE', 'Publicly Disclosed', 'Exploited', "Mitre URL"]
                writer.writerow(header)

    def get_cves_from_tenable(self, kb):
        # just get KB<number> part of kb:
        KB = self.extract_kb(kb)
        # print colorized output (light green):
        print('\033[92m' + 'Getting CVEs from Tenable KB: ' + KB + '\033[0m')
        url = self.tenable_endpoint + '/plugins/search?q=' + KB
        r = requests.get(url)
        
        # find and parse "cves":[]:
        cve_list = r.text.split('"cves":[')[1].split(']')[0].split(',')
        # print founded cve's colorized (yellow):
        print('\033[93m' + 'Found CVEs: ' + str(cve_list) + '\033[0m')
        return cve_list


    def load_kb_file(self, kb_list):
        with open(kb_list, 'r') as f:
            cve_list = f.readlines()
        return cve_list


    def check_cve(self, cve, kb=False):
        # print divider colorized (light blue):
        print('\033[94m' + '----------------------------------------' + '\033[0m')
        # print currently checking cve colorized (yellow):
        print('\033[93m' + 'Checking CVE: ' + cve + '\033[0m')
        url = self.msrc_endpoint + '/sug/v2.0/en-US/vulnerability/' + cve.replace('"','')
        r = requests.get(url)
        if r.status_code == 200:
            self.check_if_exploitable(r.json(), kb=False)
        else:
            print(cve + ' is invalid cve')


    def check_if_exploitable(self,r,kb):            
        safe = 1
        if r['publiclyDisclosed'] != 'No':
            # print "[+] Publicly Disclosed" danger colorized (red):
            print('\033[91m' + '[+] Publicly Disclosed' + '\033[0m')
            safe = 0
            public = 1
        else:
            # print "[-] Not Publicly Disclosed" colorized (light green):
            print('\033[92m' + '[-] Not Publicly Disclosed' + '\033[0m')
        if r['exploited'] != 'No':
            # print "[+] Exploited" danger colorized (red):
            print('\033[91m' + '[+] Exploited' + '\033[0m')
            exploited = 1
        else:
            # print "[-] Not Exploited" colorized (light green):
            print('\033[92m' + '[-] Not Exploited' + '\033[0m')

        # append results to csv file:
        if self.csv_file:
            with open(self.csv_file, 'a') as f:
                writer = csv.writer(f)
                # header = ['KB', 'CVE Title', 'CVE', 'Publicly Disclosed', 'Exploited', "Mitre URL"]
                row = [kb, r['cveTitle'], r['cveNumber'], r['publiclyDisclosed'], r['exploited'], r['mitreUrl']]
                writer.writerow(row)

        try:
            if safe == 0:
                # print additional info about that cve colorized (red):
                # print cveTitle:
                print('\033[91m' + 'cveTitle: ' + r['cveTitle'] + '\033[0m')
                # print description:
                print('\033[91m' + 'description: ' + r['description'] + '\033[0m')
                # print mitreUrl:
                print('\033[91m' + 'mitreUrl: ' + r['mitreUrl'] + '\033[0m')
                # print kb:
                print('\033[91m' + 'kb: ' + kb + '\033[0m')

            #Â write everything to file 'dangerous_cves':
                with open('dangerous_cves2', 'a') as f:
                    f.write('\n')
                    f.write(r['cveTitle'] + '')
                    f.write(r['description'] + '')
                    f.write(r['mitreUrl'] + '')
                    f.write(kb + '')
                    f.write('\n')
        except:
            pass

    
    def extract_kb(self, kb):
        KB = re.findall(r"KB\d{7}",kb)
        return KB[0]


    def cve_list_to_exploitables(self, cve_file):
        cve_list = self.load_kb_file(cve_file)
        for cve in cve_list:
            self.check_cve(cve)


    def kb_to_exploitables(self, kb):
        cve_list = self.get_cves_from_tenable(self.extract_kb(kb))
        for cve in cve_list:
            self.check_cve(cve,kb)

    
    # check exploits for each kb from kb_list file:
    def kb_list_to_exploitables(self, kb_file):
        kb_list = self.load_kb_file(kb_file)
        for kb in kb_list:
            self.kb_to_exploitables(kb)

if __name__ == '__main__':
    # print kbchecker colorized:
    # print '\033[92m' + 'KBChecker' + '\033[0m' 
    print('\033[92m')  
    print('''
    +-+-+-+-+-+-+-+-+-+
    |k|b|C|h|e|c|k|e|r|
    +-+-+-+-+-+-+-+-+-+
    ''')
    print('\033[0m')
    # get arguments:
    parser = argparse.ArgumentParser()
    parser.add_argument('-kb', help='KB number')
    parser.add_argument('-cve', help='CVE number')
    parser.add_argument('-cve_list', help='CVE list file')
    parser.add_argument('-kb_list', help='KB list file')
    # optional:
    parser.add_argument('-csv', help='CSV Output')
    args = parser.parse_args()

    # list help:
    if not args.kb and not args.kb_list and not args.cve and not args.cve_list:
        parser.print_help()
        exit()

    if args.csv:
        msrc = MSRC_CHECKER(args.csv)
    else:
        msrc = MSRC_CHECKER()

    if args.kb:
        msrc.kb_to_exploitables(args.kb)
    elif args.kb_list:
        msrc.kb_list_to_exploitables(args.kb_list)
    elif args.cve:
        msrc.check_cve(args.cve)
    elif args.cve_list:
        msrc.cve_list_to_exploitables(args.cve_list)
